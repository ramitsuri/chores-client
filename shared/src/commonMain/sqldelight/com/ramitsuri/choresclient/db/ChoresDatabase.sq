import com.ramitsuri.choresclient.data.ActiveStatus;
import com.ramitsuri.choresclient.data.CreateType;
import com.ramitsuri.choresclient.data.ProgressStatus;
import com.ramitsuri.choresclient.data.RepeatUnit;
import kotlinx.datetime.Instant;
import kotlinx.datetime.LocalDateTime;

/**
 * TASK-ASSIGNMENT
 */
CREATE TABLE IF NOT EXISTS TaskAssignmentEntity (
    id TEXT NOT NULL PRIMARY KEY,
    progressStatus INTEGER AS ProgressStatus NOT NULL,
    progressStatusDate INTEGER AS Instant NOT NULL,
    taskId TEXT NOT NULL,
    memberId TEXT NOT NULL,
    dueDateTime TEXT AS LocalDateTime NOT NULL,
    createDate INTEGER AS Instant NOT NULL,
    createType INTEGER AS CreateType NOT NULL,
    shouldUpload INTEGER AS Boolean NOT NULL
);

selectAssignments:
SELECT * FROM TaskAssignmentEntity;
/**
 * INNER JOIN MemberEntity ON TaskAssignmentEntity.memberId = MemberEntity.id
 * INNER JOIN TaskEntity ON TaskAssignmentEntity.taskId = TaskEntity.id;
 */

selectAssignment:
SELECT * FROM TaskAssignmentEntity
WHERE id = :id;

selectAssignmentsForUpload:
SELECT * FROM TaskAssignmentEntity
WHERE shouldUpload = 1;

updateAssignment:
UPDATE TaskAssignmentEntity
SET progressStatus = ?, progressStatusDate = ?, shouldUpload = ?
WHERE id = ?;

insertAssignment:
INSERT OR IGNORE INTO
TaskAssignmentEntity (id, progressStatus, progressStatusDate, taskId, memberId, dueDateTime, createDate, createType, shouldUpload)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

deleteTodo:
DELETE FROM TaskAssignmentEntity
WHERE progressStatus = 1;

/**
 * MEMBER
 */
CREATE TABLE IF NOT EXISTS MemberEntity (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    createdDate INTEGER AS Instant NOT NULL
);

selectMember:
SELECT * FROM MemberEntity
WHERE id = ?;

insertMember:
INSERT OR REPLACE INTO
MemberEntity (id, name, createdDate)
VALUES (?, ?, ?);

deleteMembers:
DELETE FROM MemberEntity;

/**
 * TASK
 */
CREATE TABLE IF NOT EXISTS TaskEntity (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    dueDateTime TEXT AS LocalDateTime NOT NULL,
    repeatValue INTEGER NOT NULL,
    repeatUnit INTEGER AS RepeatUnit NOT NULL,
    houseId TEXT NOT NULL,
    memberId TEXT NOT NULL,
    rotateMember INTEGER AS Boolean NOT NULL,
    createdDate INTEGER AS Instant NOT NULL,
    status INTEGER AS ActiveStatus NOT NULL
);

selectTask:
SELECT * FROM TaskEntity
WHERE id = ?;

insertTask:
INSERT OR REPLACE INTO
TaskEntity (id, name, description, dueDateTime, repeatValue, repeatUnit, houseId, memberId, rotateMember, createdDate, status)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

deleteTasks:
DELETE FROM TaskEntity;

/**
 * ALARM
 */
CREATE TABLE IF NOT EXISTS AlarmEntity (
    assignmentId TEXT NOT NULL PRIMARY KEY,
    showAtTime TEXT AS LocalDateTime NOT NULL,
    systemNotificationId INTEGER NOT NULL
);

selectAlarms:
SELECT * FROM AlarmEntity;

selectAlarm:
SELECT * FROM AlarmEntity
WHERE assignmentId = ?;

insertAlarm:
INSERT OR REPLACE INTO
AlarmEntity (assignmentId, showAtTime, systemNotificationId)
VALUES (?, ?, ?);

deleteAlarm:
DELETE FROM AlarmEntity
WHERE assignmentId = ?;

/**
 * HOUSE (also known as lists)
 */
CREATE TABLE IF NOT EXISTS HouseEntity (
    id TEXT NOT NULL PRIMARY KEY,
    name TEXT NOT NULL,
    createdByMemberId TEXT NOT NULL,
    createdDate INTEGER AS Instant NOT NULL,
    status INTEGER AS ActiveStatus NOT NULL
);

selectHouse:
SELECT * FROM HouseEntity
WHERE id = ?;

selectHouses:
SELECT * FROM HouseEntity;

insertHouse:
INSERT OR REPLACE INTO
HouseEntity (id, name, createdByMemberId, createdDate, status)
VALUES (?, ?, ?, ?, ?);

deleteHouses:
DELETE FROM HouseEntity;
